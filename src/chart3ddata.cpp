// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "chart3ddata.h"


/////////////////////////////////////////////////////////////////////////////
// CChart3DData properties

LPDISPATCH CChart3DData::GetParent()
{
	LPDISPATCH result;
	GetProperty(0x1, VT_DISPATCH, (void*)&result);
	return result;
}

BOOL CChart3DData::GetIsBatched()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CChart3DData::SetIsBatched(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CChart3DData::GetIsSaved()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CChart3DData::SetIsSaved(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

CString CChart3DData::GetFileName()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CChart3DData::SetFileName(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

long CChart3DData::GetLayout()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CChart3DData::SetLayout(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

double CChart3DData::GetHoleValue()
{
	double result;
	GetProperty(0x6, VT_R8, (void*)&result);
	return result;
}

void CChart3DData::SetHoleValue(double propVal)
{
	SetProperty(0x6, VT_R8, propVal);
}

long CChart3DData::GetRowCount()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CChart3DData::SetRowCount(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CChart3DData::GetColumnCount()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CChart3DData::SetColumnCount(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

double CChart3DData::GetRowOrigin()
{
	double result;
	GetProperty(0x9, VT_R8, (void*)&result);
	return result;
}

void CChart3DData::SetRowOrigin(double propVal)
{
	SetProperty(0x9, VT_R8, propVal);
}

double CChart3DData::GetColumnOrigin()
{
	double result;
	GetProperty(0xa, VT_R8, (void*)&result);
	return result;
}

void CChart3DData::SetColumnOrigin(double propVal)
{
	SetProperty(0xa, VT_R8, propVal);
}

CString CChart3DData::GetDataPath()
{
	CString result;
	GetProperty(0x18, VT_BSTR, (void*)&result);
	return result;
}

void CChart3DData::SetDataPath(LPCTSTR propVal)
{
	SetProperty(0x18, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CChart3DData operations

double CChart3DData::GetRowDelta(long Row)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Row);
	return result;
}

void CChart3DData::SetRowDelta(long Row, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Row, newValue);
}

double CChart3DData::GetColumnDelta(long Column)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Column);
	return result;
}

void CChart3DData::SetColumnDelta(long Column, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Column, newValue);
}

double CChart3DData::GetValue(long Row, long Column)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Row, Column);
	return result;
}

void CChart3DData::SetValue(long Row, long Column, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Row, Column, newValue);
}

void CChart3DData::Smooth(double Weight)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Weight);
}

CChart3DData CChart3DData::Copy()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CChart3DData(pDispatch);
}

CChart3DData CChart3DData::CreateShaded(double Sweep, double Rise, double Scale, double Ambient, double Intensity)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		Sweep, Rise, Scale, Ambient, Intensity);
	return CChart3DData(pDispatch);
}

CChart3DData CChart3DData::CreateSubset(double XStart, double YStart, double XEnd, double YEnd, long NumX, long NumY, long Method)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		XStart, YStart, XEnd, YEnd, NumX, NumY, Method);
	return CChart3DData(pDispatch);
}

BOOL CChart3DData::Load(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CChart3DData::Save(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CChart3DData::CopyZArrayIn(const VARIANT& vArray)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&vArray);
	return result;
}

BOOL CChart3DData::CopyZArrayOut(const VARIANT& vArray)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&vArray);
	return result;
}

long CChart3DData::UpdateDataValue(double OldValue, double NewValue)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		OldValue, NewValue);
	return result;
}

BOOL CChart3DData::LoadURL(LPCTSTR URLName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		URLName);
	return result;
}
