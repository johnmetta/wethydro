// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "chart3d.h"

// Dispatch interfaces referenced by this interface
#include "Title1.h"
#include "legend1.h"
#include "border1.h"
#include "Interior1.h"
#include "chartarea1.h"
#include "ChartGroupCollection1.h"
#include "ChartLabelCollection1.h"
#include "actionmapcollection1.h"

/////////////////////////////////////////////////////////////////////////////
// CChart3D

IMPLEMENT_DYNCREATE(CChart3D, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CChart3D properties

BOOL CChart3D::GetIsDoubleBuffered()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CChart3D::SetIsDoubleBuffered(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

CTitle1 CChart3D::GetHeader()
{
	LPDISPATCH pDispatch;
	GetProperty(0x3, VT_DISPATCH, (void*)&pDispatch);
	return CTitle1(pDispatch);
}

CTitle1 CChart3D::GetFooter()
{
	LPDISPATCH pDispatch;
	GetProperty(0x4, VT_DISPATCH, (void*)&pDispatch);
	return CTitle1(pDispatch);
}

CLegend1 CChart3D::GetLegend()
{
	LPDISPATCH pDispatch;
	GetProperty(0x5, VT_DISPATCH, (void*)&pDispatch);
	return CLegend1(pDispatch);
}

CBorder1 CChart3D::GetBorder()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6, VT_DISPATCH, (void*)&pDispatch);
	return CBorder1(pDispatch);
}

CInterior1 CChart3D::GetInterior()
{
	LPDISPATCH pDispatch;
	GetProperty(0x7, VT_DISPATCH, (void*)&pDispatch);
	return CInterior1(pDispatch);
}

CChartArea1 CChart3D::GetChartArea()
{
	LPDISPATCH pDispatch;
	GetProperty(0x8, VT_DISPATCH, (void*)&pDispatch);
	return CChartArea1(pDispatch);
}

CChartGroupCollection1 CChart3D::GetChartGroups()
{
	LPDISPATCH pDispatch;
	GetProperty(0x9, VT_DISPATCH, (void*)&pDispatch);
	return CChartGroupCollection1(pDispatch);
}

long CChart3D::GetErrorOffset()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CChart3D::SetErrorOffset(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

CChartLabelCollection1 CChart3D::GetChartLabels()
{
	LPDISPATCH pDispatch;
	GetProperty(0xb, VT_DISPATCH, (void*)&pDispatch);
	return CChartLabelCollection1(pDispatch);
}

CActionMapCollection1 CChart3D::GetActionMaps()
{
	LPDISPATCH pDispatch;
	GetProperty(0xc, VT_DISPATCH, (void*)&pDispatch);
	return CActionMapCollection1(pDispatch);
}

long CChart3D::GetPreviewMethod()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CChart3D::SetPreviewMethod(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

OLE_HANDLE CChart3D::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CChart3D::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

BOOL CChart3D::GetAllowUserChanges()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CChart3D::SetAllowUserChanges(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

CString CChart3D::GetDataPath()
{
	CString result;
	GetProperty(0x19, VT_BSTR, (void*)&result);
	return result;
}

void CChart3D::SetDataPath(LPCTSTR propVal)
{
	SetProperty(0x19, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CChart3D operations

void CChart3D::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CChart3D::Load(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CChart3D::Save(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

void CChart3D::CallAction(long Action, long XCoord, long YCoord)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Action, XCoord, YCoord);
}

BOOL CChart3D::DrawToDC(long Hdc, long Format, long Scale, long Left, long Top, long Width, long Height)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Hdc, Format, Scale, Left, Top, Width, Height);
	return result;
}

BOOL CChart3D::PrintChart(long Format, long Scale, long Left, long Top, long Width, long Height)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Format, Scale, Left, Top, Width, Height);
	return result;
}

BOOL CChart3D::CopyToClipboard(long Format)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Format);
	return result;
}

BOOL CChart3D::DrawToFile(LPCTSTR FileName, long Format)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Format);
	return result;
}

BOOL CChart3D::ShowChartEditorElement(short Element, BOOL Show)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Element, Show);
	return result;
}

BOOL CChart3D::IsChartEditorElementVisible(short Element)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Element);
	return result;
}

BOOL CChart3D::LoadURL(LPCTSTR URLName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		URLName);
	return result;
}

void CChart3D::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
